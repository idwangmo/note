(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{313:function(v,_,a){"use strict";a.r(_);var i=a(6),t=Object(i.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[v._v("#")]),v._v(" 基础")]),v._v(" "),a("h3",{attrs:{id:"微服务的挑战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务的挑战"}},[v._v("#")]),v._v(" 微服务的挑战")]),v._v(" "),a("ul",[a("li",[v._v("运维的新挑战")]),v._v(" "),a("li",[v._v("接口的一致性")]),v._v(" "),a("li",[v._v("分布式的复杂性")])]),v._v(" "),a("h3",{attrs:{id:"微服务的九大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务的九大特性"}},[v._v("#")]),v._v(" 微服务的九大特性")]),v._v(" "),a("ul",[a("li",[v._v("服务组建化")]),v._v(" "),a("li",[v._v("按业务组织团队")]),v._v(" "),a("li",[v._v("做“产品”的态度")]),v._v(" "),a("li",[v._v("智能端点与哑管道")]),v._v(" "),a("li",[v._v("去中心化治理")]),v._v(" "),a("li",[v._v("去中心化管理数据")]),v._v(" "),a("li",[v._v("基础设施自动化\n"),a("ul",[a("li",[v._v("自动化测试")]),v._v(" "),a("li",[v._v("自动化部署")])])]),v._v(" "),a("li",[v._v("容错设计")])]),v._v(" "),a("h2",{attrs:{id:"spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[v._v("#")]),v._v(" Spring boot")]),v._v(" "),a("h3",{attrs:{id:"spring-boot-的加载顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的加载顺序"}},[v._v("#")]),v._v(" Spring boot 的加载顺序")]),v._v(" "),a("ol",[a("li",[v._v("命令行中传入的参数")]),v._v(" "),a("li",[a("code",[v._v("SPRING_APPLICATION_JSON")]),v._v("中的属性")]),v._v(" "),a("li",[a("code",[v._v("java:comp/env")]),v._v("中的 JNDI 属性")]),v._v(" "),a("li",[v._v("Java 的系统属性")]),v._v(" "),a("li",[v._v("操作系统的环境变量")]),v._v(" "),a("li",[v._v("通过"),a("code",[v._v("random.*")]),v._v("配置的随机属性")]),v._v(" "),a("li",[v._v("位于 jar 包之外，针对不同"),a("code",[v._v("{profile}")]),v._v("环境的配置文件内容")]),v._v(" "),a("li",[v._v("位于当前应用 jar 包之内，针对不同"),a("code",[v._v("{profile}")]),v._v("环境的配置文件内容")]),v._v(" "),a("li",[v._v("位于当前应用 jar 包之外的"),a("code",[v._v("application.properties")]),v._v("和 YAML 配置内容")]),v._v(" "),a("li",[v._v("位于当前应用 jar 包之内的"),a("code",[v._v("application.properties")]),v._v("和 YAML 配置内容")]),v._v(" "),a("li",[v._v("在"),a("code",[v._v("@Configuration")]),v._v("注解修改的类中，通过"),a("code",[v._v("@PropertySource")]),v._v("注解定义的属性")]),v._v(" "),a("li",[v._v("应用默认属性")])]),v._v(" "),a("h3",{attrs:{id:"原生端点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生端点"}},[v._v("#")]),v._v(" 原生端点")]),v._v(" "),a("ul",[a("li",[v._v("应用配置类")]),v._v(" "),a("li",[v._v("度量指标类")]),v._v(" "),a("li",[v._v("操作控制类")])]),v._v(" "),a("h2",{attrs:{id:"服务治理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务治理"}},[v._v("#")]),v._v(" 服务治理")]),v._v(" "),a("p",[v._v("服务治理包含：")]),v._v(" "),a("ul",[a("li",[v._v("服务注册中心")]),v._v(" "),a("li",[v._v("服务提供者")]),v._v(" "),a("li",[v._v("服务消费者")])]),v._v(" "),a("p",[v._v("Euraka 中有 Regoion 和 Zone 的概念，一个 Regoin 可以包含多个 Zone，每个服务客户端需要被注册到一个 Zone 中，所以每个客户端对应一个 Regoin 和一个 Zone")]),v._v(" "),a("p",[v._v("Jersery 是 JAX-RS 的参考实现：")]),v._v(" "),a("ul",[a("li",[v._v("核心服务器")]),v._v(" "),a("li",[v._v("核心客户端")]),v._v(" "),a("li",[v._v("集成")])]),v._v(" "),a("h2",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[v._v("#")]),v._v(" 负载均衡")]),v._v(" "),a("p",[v._v("硬件负载均衡主要通过在服务器节点之间安装专门用于负载均衡的设备，而软件负载均衡则\n是通过在服务器上安装一些具有均衡负载功能或模块的软件来完成请求分发工作")]),v._v(" "),a("h2",{attrs:{id:"容错保护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容错保护"}},[v._v("#")]),v._v(" 容错保护")]),v._v(" "),a("h3",{attrs:{id:"依赖隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖隔离"}},[v._v("#")]),v._v(" 依赖隔离")]),v._v(" "),a("p",[v._v("通过实现对依赖服务的线程池隔离，可以带来的优势：")]),v._v(" "),a("ul",[a("li",[v._v("应用自身得到完全保护，不会受不可控的依赖服务影响")]),v._v(" "),a("li",[v._v("可以有效降低接入新服务的风险")]),v._v(" "),a("li",[v._v("当依赖的服务出现配置错误的时候，线程池会快速反映出此问题")]),v._v(" "),a("li",[v._v("当依赖的服务因实现机制调整灯原因造成性能出现很大变化的时候，线程池的监控指标信息会反映出这样的变化")]),v._v(" "),a("li",[v._v("每个专有线程池都提供了内置的并非实现，可以利用它为同步的依赖构建异步访问")])]),v._v(" "),a("h2",{attrs:{id:"网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关"}},[v._v("#")]),v._v(" 网关")]),v._v(" "),a("h3",{attrs:{id:"api-网关的重要性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-网关的重要性"}},[v._v("#")]),v._v(" API 网关的重要性")]),v._v(" "),a("ul",[a("li",[v._v("作为系统的统一入口，屏蔽了系统内部各个微服务的细节")]),v._v(" "),a("li",[v._v("可以与服务治理框架接口，实现自动化的服务实例维护以及复杂均衡路由的转发")]),v._v(" "),a("li",[v._v("可以实现接口权限与微服务业务逻辑的接耦")]),v._v(" "),a("li",[v._v("通过服务网关中的过滤器，保证了微服务的无状态性，同时降低了微服务的测试难度，让服务本身更集中关注业务逻辑的处理")])]),v._v(" "),a("h2",{attrs:{id:"消息总线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息总线"}},[v._v("#")]),v._v(" 消息总线")]),v._v(" "),a("p",[v._v("消息代理是一种消息验证、传输、路由的架构模式")]),v._v(" "),a("p",[v._v("AMQP 与 JMS 不同，JMS 定义了一个 API 和一组消息收发必须实现的行为，而 AMQP 是一个线路级路由")]),v._v(" "),a("p",[v._v("Kafka 是基于消息发布——订阅模式实现的消息系统，其主要设计目的是：")]),v._v(" "),a("ul",[a("li",[v._v("消息的持久化")]),v._v(" "),a("li",[v._v("高吞吐")]),v._v(" "),a("li",[v._v("分布式")]),v._v(" "),a("li",[v._v("跨平台")]),v._v(" "),a("li",[v._v("实时性")]),v._v(" "),a("li",[v._v("伸缩性")])]),v._v(" "),a("p",[v._v("Spring 的事件驱动模型包含了三个基本概念：事件、事件监听和事件发布者")]),v._v(" "),a("p",[v._v("Spring Cloud Stream 的核心概念：")]),v._v(" "),a("ul",[a("li",[v._v("Binder")]),v._v(" "),a("li",[v._v("发布——订阅模式")]),v._v(" "),a("li",[v._v("Consumer")]),v._v(" "),a("li",[v._v("消息分区")])]),v._v(" "),a("p",[v._v("一个典型的 Binder 绑定器实现包括的内容：")]),v._v(" "),a("ul",[a("li",[v._v("一个实现 Binder 接口的类")]),v._v(" "),a("li",[v._v("一个 Spring 配置加载类，用来创建连接消息中间件的基础结构使用的实例")]),v._v(" "),a("li",[v._v("一个或多个能在 classpath 下 META-INF/spring.binders 路径找到的绑定器定义文件")])]),v._v(" "),a("h2",{attrs:{id:"链路追踪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链路追踪"}},[v._v("#")]),v._v(" 链路追踪")]),v._v(" "),a("p",[v._v("分布式系统中服务跟踪主要包含两个关键点：")]),v._v(" "),a("ul",[a("li",[v._v("为了实现请求追踪，当请求发送打分布式系统的入口端时，只需要服务跟踪框架为该请求创建一个唯一的跟踪标识，同时在分布式系统内部流转的时候，框架始终传递该唯一标识，知道请求方返回为止")]),v._v(" "),a("li",[v._v("为了统计各处理单元的时间延迟，当请求到达各个服务组建时，或是处理逻辑到达某个状态时，也通过一个唯一标识来标记它的开始、具体过程以及结束")])])])}),[],!1,null,null,null);_.default=t.exports}}]);