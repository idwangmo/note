(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{331:function(a,t,e){"use strict";e.r(t);var s=e(6),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"spring-boot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[a._v("#")]),a._v(" Spring boot")]),a._v(" "),e("h2",{attrs:{id:"基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),e("p",[a._v("spring-boot-starter：核心模块，包括自动化配置支持，日志和YAML")]),a._v(" "),e("p",[a._v("spring-boot-test：测试模块")]),a._v(" "),e("p",[a._v("配置文件位于application.properties或application.yml中")]),a._v(" "),e("p",[a._v("配置文件的用处：")]),a._v(" "),e("ol",[e("li",[a._v("自定义的属性与加载——在配置文件定义完成之后使用"),e("code",[a._v("@Value(${属性名})")]),a._v("进行使用")]),a._v(" "),e("li",[a._v("参数间的引用")]),a._v(" "),e("li",[a._v("使用随机数——可以使用${random}来产生int值，long值或值String字符串")]),a._v(" "),e("li",[a._v("可以通过命令行设置属性值")]),a._v(" "),e("li",[a._v("多环境配置")])]),a._v(" "),e("p",[a._v("在配置文件中通过spring.profile.active属性来设置对应的profile值")]),a._v(" "),e("p",[a._v("@RestController：Spring4新加注解，取代之前的@Controller和@RequestBody配合返回JSON的写法")]),a._v(" "),e("h2",{attrs:{id:"文档注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文档注释"}},[a._v("#")]),a._v(" 文档注释")]),a._v(" "),e("p",[a._v("使用Swagger2构建API文档的步骤：")]),a._v(" "),e("ol",[e("li",[a._v("添加Swagger2依赖")]),a._v(" "),e("li",[a._v("创建Swagger2的配置类——在Application.java同级别下创建配置类Swagger2，，通过"),e("code",[a._v("@Configuration")]),a._v("注解，让Spring来加载该类配置。再通过"),e("code",[a._v("@EnableSwagger2")]),a._v("注解来启用Swagger2。再通过"),e("code",[a._v("createRestApi")]),a._v("函数创建"),e("code",[a._v("Docket")]),a._v("的Bean之后，"),e("code",[a._v("apiInfo()")]),a._v("用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。"),e("code",[a._v("select()")]),a._v("函数返回一个"),e("code",[a._v("ApiSelectorBuilder")]),a._v("实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被"),e("code",[a._v("@ApiIgnore")]),a._v("指定的请求）。")]),a._v(" "),e("li",[a._v("添加上文档\n"),e("ol",[e("li",[a._v("通过@ApiOption注解来个API增加说明")]),a._v(" "),e("li",[a._v("通过"),e("code",[a._v("@ApiImplicitParams")]),a._v("、"),e("code",[a._v("@ApiImplicitParam")]),a._v("注解来给参数增加说明。")])])])]),a._v(" "),e("h2",{attrs:{id:"统一异常处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一异常处理"}},[a._v("#")]),a._v(" 统一异常处理")]),a._v(" "),e("ol",[e("li",[a._v("创建全局异常处理类：通过使用"),e("code",[a._v("@ControllerAdvice")]),a._v("定义统一的异常处理类，而不是在每个Controller中逐个定义。"),e("code",[a._v("@ExceptionHandler")]),a._v("用来定义函数针对的异常类型，最后将Exception对象和请求URL映射到"),e("code",[a._v("error.html")]),a._v("中")]),a._v(" "),e("li",[a._v("实现error.html页面")])]),a._v(" "),e("p",[a._v("我们只需要在Controller中抛出Exception，当然我们可能会有多种不同的Exception。然后在@ControllerAdvice类中，根据抛出的具体Exception类型匹配@ExceptionHandler中配置的异常类型来匹配错误映射和处理。")]),a._v(" "),e("p",[a._v("返回JSON格式：")]),a._v(" "),e("p",[a._v("本质上，只需在"),e("code",[a._v("@ExceptionHandler")]),a._v("之后加入"),e("code",[a._v("@ResponseBody")]),a._v("，就能让处理函数return的内容转换为JSON格式。")]),a._v(" "),e("h2",{attrs:{id:"使用jdbctemplate访问数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用jdbctemplate访问数据库"}},[a._v("#")]),a._v(" 使用JdbcTemplate访问数据库")]),a._v(" "),e("p",[a._v("数据源的配置：")]),a._v(" "),e("ol",[e("li",[a._v("连接数据库")]),a._v(" "),e("li",[a._v("在application.properties中配置数据源信息")]),a._v(" "),e("li",[a._v("使用JdbcTemplate操作数据库")])]),a._v(" "),e("h3",{attrs:{id:"数据访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据访问"}},[a._v("#")]),a._v(" 数据访问")]),a._v(" "),e("p",[a._v("通过整合Hibernate之类的ORM框架，我们以操作Java实体的方式最终将数据改变映射到数据库表中。")]),a._v(" "),e("p",[e("code",[a._v("spring.jpa.properties.hibernate.hbm2ddl.auto")]),a._v("是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("create")]),a._v("：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。")]),a._v(" "),e("li",[e("code",[a._v("create-drop")]),a._v("：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。")]),a._v(" "),e("li",[e("code",[a._v("update")]),a._v("：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。")]),a._v(" "),e("li",[e("code",[a._v("validate")]),a._v("：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。")])]),a._v(" "),e("p",[a._v("创建一个Spring配置类，定义两个DataSource用来读取"),e("code",[a._v("application.properties")]),a._v("中的不同配置。如下例子中，主数据源配置为"),e("code",[a._v("spring.datasource.primary")]),a._v("开头的配置，第二数据源配置为"),e("code",[a._v("spring.datasource.secondary")]),a._v("开头的配置。")]),a._v(" "),e("p",[a._v("对JdbcTemplate的支持比较简单，只需要为其注入对应的datasource即可")]),a._v(" "),e("p",[a._v("新增对第一数据源的JPA配置，注意两处注释的地方，用于指定数据源对应的"),e("code",[a._v("Entity")]),a._v("实体和"),e("code",[a._v("Repository")]),a._v("定义位置，用"),e("code",[a._v("@Primary")]),a._v("区分主数据源。")]),a._v(" "),e("p",[a._v("操作数据的方式：")]),a._v(" "),e("ol",[e("li",[a._v("使用默认接口")]),a._v(" "),e("li",[a._v("通通过解析方法名创建查询")]),a._v(" "),e("li",[a._v("使用"),e("code",[a._v("@Query")]),a._v("注解来创建查询")])]),a._v(" "),e("p",[a._v("在JdbcTemplate的多数据源的支持可以使用"),e("code",[a._v("@Qualifier")]),a._v("来标识就行")]),a._v(" "),e("p",[a._v("Spring JPA中对于多数据源的支持可以使用DataSource Cofing来完成")]),a._v(" "),e("h3",{attrs:{id:"整合mybatis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整合mybatis"}},[a._v("#")]),a._v(" 整合MyBatis")]),a._v(" "),e("ol",[e("li",[a._v("引入整合MyBatis的核心依赖mybatis-spring-boot-starter，这里不引入spring-boot-starter-jdbc依赖，是由于mybatis-spring-boot-starter中已经包含了此依赖")]),a._v(" "),e("li",[a._v("配置数据库的连接")])]),a._v(" "),e("h4",{attrs:{id:"mybatis注解配置："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis注解配置："}},[a._v("#")]),a._v(" MyBatis注解配置：")]),a._v(" "),e("p",[a._v("传递参方式：")]),a._v(" "),e("ol",[e("li",[a._v("使用"),e("code",[a._v("@Param")])]),a._v(" "),e("li",[a._v("使用Map")]),a._v(" "),e("li",[a._v("使用对象")])]),a._v(" "),e("p",[a._v("增删改查："),e("code",[a._v("@Insert")]),a._v("、"),e("code",[a._v("@Delete")]),a._v("、"),e("code",[a._v("@Update")]),a._v("、"),e("code",[a._v("@Select")])]),a._v(" "),e("p",[a._v("对于增、删、改操作相对变化较小。而对于“查”操作，我们往往需要进行多表关联，汇总计算等操作，那么对于查询的结果往往就不再是简单的实体对象了，往往需要返回一个与数据库实体不同的包装类，那么对于这类情况，就可以通过"),e("code",[a._v("@Results")]),a._v("和"),e("code",[a._v("@Result")]),a._v("注解来进行绑定")]),a._v(" "),e("h2",{attrs:{id:"事物管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事物管理"}},[a._v("#")]),a._v(" 事物管理")]),a._v(" "),e("p",[a._v("事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。")]),a._v(" "),e("p",[a._v("通过单元测试演示了如何使用"),e("code",[a._v("@Transactional")]),a._v("注解来声明一个函数需要被事务管理，通常我们单元测试为了保证每个测试之间的数据独立，会使用"),e("code",[a._v("@Rollback")]),a._v("注解让每个单元测试都能在结束时回滚。而真正在开发业务逻辑时，我们通常在service层接口中使用"),e("code",[a._v("@Transactional")]),a._v("来对各个业务逻辑进行事务管理的配置")]),a._v(" "),e("h3",{attrs:{id:"隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别"}},[a._v("#")]),a._v(" 隔离级别")]),a._v(" "),e("p",[a._v("隔离级别是指若干个并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读取、重复读、幻读")]),a._v(" "),e("p",[a._v("我们可以看"),e("code",[a._v("org.springframework.transaction.annotation.Isolation")]),a._v("枚举类中定义了五个表示隔离级别的值：")]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("enum")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Isolation")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("DEFAULT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("READ_UNCOMMITTED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("READ_COMMITTED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("REPEATABLE_READ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("SERIALIZABLE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br")])]),e("ul",[e("li",[e("code",[a._v("DEFAULT")]),a._v("：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是："),e("code",[a._v("READ_COMMITTED")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("READ_UNCOMMITTED")]),a._v("：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。")]),a._v(" "),e("li",[e("code",[a._v("READ_COMMITTED")]),a._v("：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。")]),a._v(" "),e("li",[e("code",[a._v("REPEATABLE_READ")]),a._v("：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。")]),a._v(" "),e("li",[e("code",[a._v("SERIALIZABLE")]),a._v("：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。")])]),a._v(" "),e("p",[a._v("指定方法：通过使用"),e("code",[a._v("isolation")]),a._v("属性设置，例如：")]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("isolation "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Isolation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DEFAULT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h3",{attrs:{id:"传播行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传播行为"}},[a._v("#")]),a._v(" 传播行为")]),a._v(" "),e("p",[a._v("所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。")]),a._v(" "),e("p",[a._v("我们可以看"),e("code",[a._v("org.springframework.transaction.annotation.Propagation")]),a._v("枚举类中定义了6个表示传播行为的枚举值：")]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("enum")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Propagation")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("REQUIRED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("SUPPORTS")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("MANDATORY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("REQUIRES_NEW")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("NOT_SUPPORTED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("NEVER")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("NESTED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("ul",[e("li",[e("code",[a._v("REQUIRED")]),a._v("：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。")]),a._v(" "),e("li",[e("code",[a._v("SUPPORTS")]),a._v("：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。")]),a._v(" "),e("li",[e("code",[a._v("MANDATORY")]),a._v("：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。")]),a._v(" "),e("li",[e("code",[a._v("REQUIRES_NEW")]),a._v("：创建一个新的事务，如果当前存在事务，则把当前事务挂起。")]),a._v(" "),e("li",[e("code",[a._v("NOT_SUPPORTED")]),a._v("：以非事务方式运行，如果当前存在事务，则把当前事务挂起。")]),a._v(" "),e("li",[e("code",[a._v("NEVER")]),a._v("：以非事务方式运行，如果当前存在事务，则抛出异常。")]),a._v(" "),e("li",[e("code",[a._v("NESTED")]),a._v("：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于"),e("code",[a._v("REQUIRED")]),a._v("。")])]),a._v(" "),e("p",[a._v("指定方法：通过使用"),e("code",[a._v("propagation")]),a._v("属性设置，例如：")]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("propagation "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Propagation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("REQUIRED"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h2",{attrs:{id:"spring-security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-security"}},[a._v("#")]),a._v(" Spring Security")]),a._v(" "),e("ul",[e("li",[a._v("通过"),e("code",[a._v("@EnableWebSecurity")]),a._v("注解开启Spring Security的功能")]),a._v(" "),e("li",[a._v("继承"),e("code",[a._v("WebSecurityConfigurerAdapter")]),a._v("，并重写它的方法来设置一些web安全的细节")]),a._v(" "),e("li",[e("code",[a._v("configure(HttpSecurity http)")]),a._v("方法通过"),e("code",[a._v("authorizeRequests()")]),a._v("定义哪些URL需要被保护、哪些不需要被保护。例如以上代码指定了"),e("code",[a._v("/")]),a._v("和"),e("code",[a._v("/home")]),a._v("不需要任何认证就可以访问，其他的路径都必须通过身份验证。通过"),e("code",[a._v("formLogin()")]),a._v("定义当需要用户登录时候，转到的登录页面。")]),a._v(" "),e("li",[e("code",[a._v("configureGlobal(AuthenticationManagerBuilder auth)")]),a._v("方法，在内存中创建了一个用户")])]),a._v(" "),e("h2",{attrs:{id:"缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[a._v("#")]),a._v(" 缓存")]),a._v(" "),e("h3",{attrs:{id:"缓存注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存注解"}},[a._v("#")]),a._v(" 缓存注解")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("@CacheConfig")]),a._v("：主要用于配置该类中会用到的一些共用的缓存配置。在这里"),e("code",[a._v('@CacheConfig(cacheNames = "users")')]),a._v("：配置了该数据访问对象中返回的内容将存储于名为users的缓存对象中，我们也可以不使用该注解，直接通过"),e("code",[a._v("@Cacheable")]),a._v("自己配置缓存集的名字来定义。")]),a._v(" "),e("li",[e("code",[a._v("@Cacheable")]),a._v("：配置了findByName函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：\n"),e("ul",[e("li",[e("code",[a._v("value")]),a._v("、"),e("code",[a._v("cacheNames")]),a._v("：两个等同的参数（"),e("code",[a._v("cacheNames")]),a._v("为Spring 4新增，作为"),e("code",[a._v("value")]),a._v("的别名），用于指定缓存存储的集合名。由于Spring 4中新增了"),e("code",[a._v("@CacheConfig")]),a._v("，因此在Spring 3中原本必须有的"),e("code",[a._v("value")]),a._v("属性，也成为非必需项了")]),a._v(" "),e("li",[e("code",[a._v("key")]),a._v("：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如："),e("code",[a._v('@Cacheable(key = "#p0")')]),a._v("：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考"),e("a",{attrs:{href:"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-spel-context",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方文档"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("code",[a._v("condition")]),a._v("：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如："),e("code",[a._v('@Cacheable(key = "#p0", condition = "#p0.length() < 3")')]),a._v("，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。")]),a._v(" "),e("li",[e("code",[a._v("unless")]),a._v("：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于"),e("code",[a._v("condition")]),a._v("参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。")]),a._v(" "),e("li",[e("code",[a._v("keyGenerator")]),a._v("：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现"),e("code",[a._v("org.springframework.cache.interceptor.KeyGenerator")]),a._v("接口，并使用该参数来指定。需要注意的是："),e("strong",[a._v("该参数与key是互斥的")])]),a._v(" "),e("li",[e("code",[a._v("cacheManager")]),a._v("：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用")]),a._v(" "),e("li",[e("code",[a._v("cacheResolver")]),a._v("：用于指定使用那个缓存解析器，非必需。需通过"),e("code",[a._v("org.springframework.cache.interceptor.CacheResolver")]),a._v("接口来实现自己的缓存解析器，并用该参数指定。")])])])]),a._v(" "),e("p",[a._v("除了这里用到的两个注解之外，还有下面几个核心注解：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("@CachePut")]),a._v("：配置于函数上，能够根据参数定义条件来进行缓存，它与"),e("code",[a._v("@Cacheable")]),a._v("不同的是，它每次都会真是调用函数，所以主要用于数据新增和修改操作上。它的参数与"),e("code",[a._v("@Cacheable")]),a._v("类似，具体功能可参考上面对"),e("code",[a._v("@Cacheable")]),a._v("参数的解析")]),a._v(" "),e("li",[e("code",[a._v("@CacheEvict")]),a._v("：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同"),e("code",[a._v("@Cacheable")]),a._v("一样的参数之外，它还有下面两个参数："),e("code",[a._v("allEntries")]),a._v("：非必需，默认为false。当为true时，会移除所有数据"),e("code",[a._v("beforeInvocation")]),a._v("：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。")])]),a._v(" "),e("h3",{attrs:{id:"缓存配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存配置"}},[a._v("#")]),a._v(" 缓存配置")]),a._v(" "),e("p",[a._v("在Spring Boot中通过"),e("code",[a._v("@EnableCaching")]),a._v("注解自动化配置合适的缓存管理器")]),a._v(" "),e("p",[a._v("除了按顺序侦测外，我们也可以通过配置属性"),e("code",[a._v("spring.cache.type")]),a._v("来强制指定。我们可以通过debug调试查看cacheManager对象的实例来判断当前使用了什么缓存")]),a._v(" "),e("h2",{attrs:{id:"spring-boot的工程结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot的工程结构"}},[a._v("#")]),a._v(" Spring boot的工程结构")]),a._v(" "),e("ul",[e("li",[a._v("root package结构："),e("code",[a._v("com.example.myproject")])]),a._v(" "),e("li",[a._v("应用主类"),e("code",[a._v("Application.java")]),a._v("置于root package下，通常我们会在应用主类中做一些框架配置扫描等配置，我们放在root package下可以帮助程序减少手工配置来加载到我们希望被Spring加载的内容")]),a._v(" "),e("li",[a._v("实体（Entity）与数据访问层（Repository）置于"),e("code",[a._v("com.example.myproject.domain")]),a._v("包下")]),a._v(" "),e("li",[a._v("逻辑层（Service）置于"),e("code",[a._v("com.example.myproject.service")]),a._v("包下")]),a._v(" "),e("li",[a._v("Web层（web）置于"),e("code",[a._v("com.example.myproject.web")]),a._v("包下")])]),a._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("com\n  +- example\n    +- myproject\n      +- Application.java\n      |\n      +- domain\n      |  +- Customer.java\n      |  +- CustomerRepository.java\n      |\n      +- service\n      |  +- CustomerService.java\n      |\n      +- web\n      |  +- CustomerController.java\n      |\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);