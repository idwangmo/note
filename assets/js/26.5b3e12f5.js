(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{312:function(v,_,l){"use strict";l.r(_);var i=l(6),t=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h2",{attrs:{id:"架构"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[v._v("#")]),v._v(" 架构")]),v._v(" "),l("p",[v._v("单体架构存在的问题：")]),v._v(" "),l("ul",[l("li",[v._v("复杂性搞")]),v._v(" "),l("li",[v._v("技术债务")]),v._v(" "),l("li",[v._v("部署频率低")]),v._v(" "),l("li",[v._v("可靠性差")]),v._v(" "),l("li",[v._v("扩展能力受限")]),v._v(" "),l("li",[v._v("阻碍技术创新")])]),v._v(" "),l("p",[v._v("微服务应该具备的特性：")]),v._v(" "),l("ul",[l("li",[v._v("每个微服务独立运行在自己的进程中")]),v._v(" "),l("li",[v._v("一系列独立运行的微服务共同构建起整个系统")]),v._v(" "),l("li",[v._v("每个服务为独立的业务开发，一个微服务只关注某个特定的功能")]),v._v(" "),l("li",[v._v("微服务之间通过一些轻量级通信机制通信")]),v._v(" "),l("li",[v._v("可以使用不同语言与数据存储技术")]),v._v(" "),l("li",[v._v("全自动的部署机制")])]),v._v(" "),l("p",[v._v("微服务架构的优点：")]),v._v(" "),l("ul",[l("li",[v._v("易于开发和维护")]),v._v(" "),l("li",[v._v("单个微服务启动较快")]),v._v(" "),l("li",[v._v("局部修改容易部署")]),v._v(" "),l("li",[v._v("技术栈不受限")]),v._v(" "),l("li",[v._v("按续伸缩")])]),v._v(" "),l("p",[v._v("微服务架构的挑战：")]),v._v(" "),l("ul",[l("li",[v._v("运维要求较高")]),v._v(" "),l("li",[v._v("分布式固有的复杂性")]),v._v(" "),l("li",[v._v("接口调整成本高")]),v._v(" "),l("li",[v._v("重复劳动")])]),v._v(" "),l("p",[v._v("微服务设计的原则：")]),v._v(" "),l("ul",[l("li",[v._v("单一职责原则")]),v._v(" "),l("li",[v._v("服务自治原则")]),v._v(" "),l("li",[v._v("轻量级通信机制")]),v._v(" "),l("li",[v._v("微服务粒度")])]),v._v(" "),l("h2",{attrs:{id:"spring-cloud"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud"}},[v._v("#")]),v._v(" Spring Cloud")]),v._v(" "),l("p",[v._v("硬编码的问题：")]),v._v(" "),l("ul",[l("li",[v._v("适用场景有局限")]),v._v(" "),l("li",[v._v("无法动态伸缩")])]),v._v(" "),l("h2",{attrs:{id:"服务注册与发现"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#服务注册与发现"}},[v._v("#")]),v._v(" 服务注册与发现")]),v._v(" "),l("p",[v._v("服务通过者、服务消费者、服务发现组建三者之间的关系：")]),v._v(" "),l("ul",[l("li",[v._v("各个微服务在启动时，将自己的网络地址等信息注册刀服务发现组件中，服务发现组建会存储这些信息")]),v._v(" "),l("li",[v._v("服务消费者可以从服务发现组建查询服务提供者的网络地址，并适用该地址调用服务提供者的接口")]),v._v(" "),l("li",[v._v("各个微服务与服务发现组件适用一定机制通信。服务发现组建如长时间无法与某微服务实例通信，就会注销该实例")])]),v._v(" "),l("p",[v._v("服务发现组建应该具备的功能：")]),v._v(" "),l("ul",[l("li",[v._v("服务注册表")]),v._v(" "),l("li",[v._v("服务注册与服务发现")]),v._v(" "),l("li",[v._v("服务检查")])]),v._v(" "),l("p",[v._v("在 Spring Cloud 中，Feign 默认设计用的契约是"),l("code",[v._v("SpringMvcContract")])]),v._v(" "),l("h2",{attrs:{id:"hystrix"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#hystrix"}},[v._v("#")]),v._v(" Hystrix")]),v._v(" "),l("p",[v._v("Histrix 通过以下几点实现延迟和容错：")]),v._v(" "),l("ul",[l("li",[v._v("包裹请求")]),v._v(" "),l("li",[v._v("跳闸机制")]),v._v(" "),l("li",[v._v("资源隔离")]),v._v(" "),l("li",[v._v("监控")]),v._v(" "),l("li",[v._v("回退机制")]),v._v(" "),l("li",[v._v("自我修复")])]),v._v(" "),l("p",[v._v("Hystrix 的隔离策略有两种：")]),v._v(" "),l("ul",[l("li",[v._v("THREAD（线程隔离）")]),v._v(" "),l("li",[v._v("SEMAPHORE（信号量隔离）")])]),v._v(" "),l("h2",{attrs:{id:"网关"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#网关"}},[v._v("#")]),v._v(" 网关")]),v._v(" "),l("p",[v._v("微服务网关的优点：")]),v._v(" "),l("ul",[l("li",[v._v("易于监控")]),v._v(" "),l("li",[v._v("易于认证")]),v._v(" "),l("li",[v._v("减少了客户端与各个微服务之间的交互次数")])]),v._v(" "),l("p",[v._v("Zuul 核心是过滤器，这些过滤器可以完成以下功能：")]),v._v(" "),l("ul",[l("li",[v._v("身份认证与安全")]),v._v(" "),l("li",[v._v("审查与监控")]),v._v(" "),l("li",[v._v("动态路由")]),v._v(" "),l("li",[v._v("压力测试")]),v._v(" "),l("li",[v._v("负载分配")]),v._v(" "),l("li",[v._v("静态响应处理")]),v._v(" "),l("li",[v._v("多区域弹性")])]),v._v(" "),l("p",[v._v("Zuul 过滤器的生命周期")]),v._v(" "),l("ul",[l("li",[v._v("PRE：在路由被请求之前调用")]),v._v(" "),l("li",[v._v("ROUTING：过来器将请求路由刀微服务")]),v._v(" "),l("li",[v._v("POST：路由刀微服务后执行")]),v._v(" "),l("li",[v._v("ERROR：在其他阶段发生错误时执行该过滤器")])]),v._v(" "),l("h2",{attrs:{id:"配置中心"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#配置中心"}},[v._v("#")]),v._v(" 配置中心")]),v._v(" "),l("p",[v._v("微服务的配置管理一般有以下需求：")]),v._v(" "),l("ul",[l("li",[v._v("集中配置管理")]),v._v(" "),l("li",[v._v("不同环境不同配置")]),v._v(" "),l("li",[v._v("运行期间可动态调整")]),v._v(" "),l("li",[v._v("配置后可自动更新")])]),v._v(" "),l("h2",{attrs:{id:"链路追踪"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#链路追踪"}},[v._v("#")]),v._v(" 链路追踪")]),v._v(" "),l("p",[v._v("分布式计算的八大误区：")]),v._v(" "),l("ul",[l("li",[v._v("网络可靠")]),v._v(" "),l("li",[v._v("延迟为零")]),v._v(" "),l("li",[v._v("带宽无线")]),v._v(" "),l("li",[v._v("网络绝对安全")]),v._v(" "),l("li",[v._v("网络拓扑不会改变")]),v._v(" "),l("li",[v._v("必须有一名管理员")]),v._v(" "),l("li",[v._v("传输成本为零")]),v._v(" "),l("li",[v._v("网络同质化")])])])}),[],!1,null,null,null);_.default=t.exports}}]);