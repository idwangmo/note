(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{165:function(v,_,e){v.exports=e.p+"assets/img/object-header.b5d59c73.png"},166:function(v,_,e){v.exports=e.p+"assets/img/thread-status.2e0d0577.png"},206:function(v,_,e){v.exports=e.p+"assets/img/src-to-class-process.5f3182f0.png"},207:function(v,_,e){v.exports=e.p+"assets/img/jit-process.3ec0c74e.png"},208:function(v,_,e){v.exports=e.p+"assets/img/parents-delegate.73aba544.png"},209:function(v,_,e){v.exports=e.p+"assets/img/jvm-memery-map.deecc707.png"},210:function(v,_,e){v.exports=e.p+"assets/img/gc-flow.45b639e3.png"},211:function(v,_,e){v.exports=e.p+"assets/img/servial-gc.92a71ba2.png"},212:function(v,_,e){v.exports=e.p+"assets/img/java-exception.7bb58e10.png"},213:function(v,_,e){v.exports=e.p+"assets/img/logging-framework.cfe17529.png"},214:function(v,_,e){v.exports=e.p+"assets/img/java-collections.c9ebd0e3.png"},215:function(v,_,e){v.exports=e.p+"assets/img/lock-extends.f7975dc1.png"},308:function(v,_,e){"use strict";e.r(_);var t=e(6),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"chapter-1-计算机基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-1-计算机基础"}},[v._v("#")]),v._v(" Chapter 1 计算机基础")]),v._v(" "),t("p",[t("code",[v._v("IP")]),v._v("是面向无连接、无状态的，没有额外的机制保证发送的包是否有序到达。")]),v._v(" "),t("p",[v._v("三次握手是指建立连接的三个步骤，目的是信息对等和防止超时:")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("A 机器发出一个数据包并将"),t("code",[v._v("SYN")]),v._v("置 1，表示希望建立连接")])]),v._v(" "),t("li",[t("p",[v._v("B 机器受到 A 机器的数据包后，通过"),t("code",[v._v("SYN")]),v._v("得知这是一个建立连接的请求，于是发送一个响应包并将"),t("code",[v._v("SYN")]),v._v("和"),t("code",[v._v("ACK")]),v._v("标记都指 1")])]),v._v(" "),t("li",[t("p",[v._v("A 受到 B 的响应包后需要进行确认，确认包中将 ACK 置 1")])])]),v._v(" "),t("p",[v._v("从编程的角度，"),t("code",[v._v("TCP")]),v._v("连接是通过文件描述符完成的")]),v._v(" "),t("p",[t("code",[v._v("TCP")]),v._v("断开的时候存在"),t("code",[v._v("TIME_WAIT")]),v._v("的原因：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("确认被动关闭方能够顺利进入"),t("code",[v._v("CLOSED")]),v._v("状态")])]),v._v(" "),t("li",[t("p",[v._v("防止请求丢失")])])]),v._v(" "),t("p",[v._v("如果是参数配置错误导致的系统宕机，即使增加硬件资源，也无法达到好的效果。硬件的增加于性能的提升绝对不是线性相关的，更多的时候是对数曲线关系。")]),v._v(" "),t("p",[v._v("数据库连接池是一种空间换取时间的策略，但是过多同样会影响性能")]),v._v(" "),t("p",[v._v("从经验上来看，在数据库层面的请求应答时间必须在 100ms 以内，秒级的 SQL 查询通常存在巨大的性能提升空间，应对方案如下：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("建立高效且合适的索引")])]),v._v(" "),t("li",[t("p",[v._v("排查连接资源未显示")])]),v._v(" "),t("li",[t("p",[v._v("合并短请求")])]),v._v(" "),t("li",[t("p",[v._v("合理的拆分多个表"),t("code",[v._v("join")]),v._v("的 SQL，若是超过三个则禁止"),t("code",[v._v("join")])])]),v._v(" "),t("li",[t("p",[v._v("使用临时表")])]),v._v(" "),t("li",[t("p",[v._v("应用层优化")])]),v._v(" "),t("li",[t("p",[v._v("改用其他数据库")])])]),v._v(" "),t("p",[v._v("需要建立一套完整的信息安全体系，遵循"),t("code",[v._v("CIA")]),v._v("原则，既保密性、完整性和可用性")]),v._v(" "),t("p",[v._v("预防"),t("code",[v._v("SQL")]),v._v("注入的应该考虑的几个方面")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("过滤用户输入参数中的特殊字符，从而降低被 SQL 注入的风险")])]),v._v(" "),t("li",[t("p",[v._v("禁止通过字符串拼接的 SQL 语句，严格使用参数绑定传入的 SQL 参数")])]),v._v(" "),t("li",[t("p",[v._v("合理使用数据库访问框架提供的防注入机制")])])]),v._v(" "),t("h2",{attrs:{id:"chapter-2-面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2-面向对象"}},[v._v("#")]),v._v(" Chapter 2 面向对象")]),v._v(" "),t("h3",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[v._v("#")]),v._v(" 面向对象")]),v._v(" "),t("p",[t("code",[v._v("OOP")]),v._v("的三大特性：封装、继承、多态")]),v._v(" "),t("p",[v._v("软件工程的三个主要目标：可维护性、可重用性和可扩展性")]),v._v(" "),t("p",[v._v("面向过程的结构相对松散，强调如何流程化的解决问题；面向对象的思维更加内聚，强调搞内聚、低耦合，先抽象模型，定义共性行为，再解决实际问题，再解决实际问题。")]),v._v(" "),t("p",[v._v("浅拷贝只复制当前对象的所有基本数据类型，以及相应的引用变量，但没有复制引用变量指向的实际对象；而彻底深拷贝实在成功"),t("code",[v._v("clone")]),v._v("一个对象之后，此对象与母对象在任何引用路径上都不存在共享实例对象，但是引用路径递归越深，则约接近"),t("code",[v._v("JVM")]),v._v("底层对象，且发现彻底拷贝实现难度大。介于浅拷贝和彻底深拷贝之间的都是一般深拷贝。归根到底，慎用"),t("code",[v._v("Object")]),v._v("的"),t("code",[v._v("clone()")]),v._v("方法来拷贝对象，因为对象的"),t("code",[v._v("clone()")]),v._v("方法默认是浅拷贝。")]),v._v(" "),t("p",[v._v("里氏代换原则是指任何父类能够出现的地方，子类都能够出现。")]),v._v(" "),t("p",[v._v("多态是指在编译层面无法确定最终调用方法体，以覆写为基础来实现面向对象特性，在运行期由"),t("code",[v._v("JVM")]),v._v("进行动态绑定，调用合适的覆写方法体来执行。重在是编译期确定方法调用，属于静态绑定，本质上重载的结果是完全不同的方法。")]),v._v(" "),t("h3",{attrs:{id:"类设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类设计"}},[v._v("#")]),v._v(" 类设计")]),v._v(" "),t("p",[v._v("抽象类是模板式设计，而接口是契约式设计。")]),v._v(" "),t("p",[v._v("抽象类包含一组相对具体的特征")]),v._v(" "),t("p",[v._v("外部类与内部类之间使用"),t("code",[v._v("$")]),v._v("符号分隔，匿名内部类使用数字进行编号，而方法内部类在类名浅还有一个编号来标识是哪个方法。")]),v._v(" "),t("p",[v._v("定义报能可见静态内部类的好处是：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("作用域不会扩散到包外")])]),v._v(" "),t("li",[t("p",[v._v("可以通过“外部类.内部类”的方式直接访问")])]),v._v(" "),t("li",[t("p",[v._v("内部类可以访问外部类中的所有静态属性和方法")])])]),v._v(" "),t("p",[v._v("访问级别控制：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("如果不允许外部直接通过"),t("code",[v._v("new")]),v._v("创建对象，构造方法必须是"),t("code",[v._v("private")]),v._v("的")])]),v._v(" "),t("li",[t("p",[v._v("工具类那个不允许有"),t("code",[v._v("public")]),v._v("或"),t("code",[v._v("default")]),v._v("构造方法")])]),v._v(" "),t("li",[t("p",[v._v("类非"),t("code",[v._v("static")]),v._v("成员变量并且与子类共享，必须是"),t("code",[v._v("protected")])])]),v._v(" "),t("li",[t("p",[v._v("类非"),t("code",[v._v("static")]),v._v("成员变量并且仅在本类使用，必须是"),t("code",[v._v("private")])])]),v._v(" "),t("li",[t("p",[v._v("类"),t("code",[v._v("static")]),v._v("成员变量如果仅在本类使用，必须是"),t("code",[v._v("private")])])]),v._v(" "),t("li",[t("p",[v._v("若是"),t("code",[v._v("static")]),v._v("成员变量，必须考虑是否为"),t("code",[v._v("final")])])]),v._v(" "),t("li",[t("p",[v._v("类成员方法只提供类内部调用，必须是"),t("code",[v._v("private")])])]),v._v(" "),t("li",[t("p",[v._v("类成员方法只对继承公开，那么限制为"),t("code",[v._v("protected")])])])]),v._v(" "),t("p",[v._v("任何类在创建之处，都有一个默认的空构造方法，它是"),t("code",[v._v("super()")]),v._v("的一条默认通路。")]),v._v(" "),t("p",[v._v("一个实例变量可以通过"),t("code",[v._v("this.")]),v._v("赋值另一个实例变量；一个实例方法可以通过"),t("code",[v._v("this.")]),v._v("调用另一个实例方法；甚至一个构造方法都可以通过"),t("code",[v._v("this.")]),v._v("调用另一个构造方法。")]),v._v(" "),t("p",[v._v("类关系情况：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("继承(is-a)")])]),v._v(" "),t("li",[t("p",[v._v("实现(can-do)")])]),v._v(" "),t("li",[t("p",[v._v("组合(contains-a)")])]),v._v(" "),t("li",[t("p",[v._v("聚合(has-a)")])]),v._v(" "),t("li",[t("p",[v._v("依赖(use-a)")])])]),v._v(" "),t("p",[v._v("将数据对象转换为二进制流的过程称为对象的序列化，将二进制流恢复为数据对象的过程称为反序列化。")]),v._v(" "),t("p",[v._v("有些对象的敏感属性不需要进行序列化传输，可以加"),t("code",[v._v("transient")]),v._v("关键字，避免把此属性信息转换为序列化的二进制流")]),v._v(" "),t("h3",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[v._v("#")]),v._v(" 方法")]),v._v(" "),t("p",[v._v("参数预处理包括两种：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("入参保护")])]),v._v(" "),t("li",[t("p",[v._v("参数校验")])])]),v._v(" "),t("p",[v._v("静态方法需要注意的地方：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("静态方法中不能使用实例成员变量和实例方法")])]),v._v(" "),t("li",[t("p",[v._v("静态方法不能使用"),t("code",[v._v("super")]),v._v("和"),t("code",[v._v("this")]),v._v("关键字，这两个关键子指代的都是需要被创建出来的对象")])])]),v._v(" "),t("p",[v._v("在实际应用中如初始化容器时，可以使用静态代码块加载判断、属性初始化、环境配置等。")]),v._v(" "),t("p",[t("code",[v._v("POJO")]),v._v("专门指只包含"),t("code",[v._v("getter")]),v._v("、"),t("code",[v._v("setter")]),v._v("、"),t("code",[v._v("toString")]),v._v("方法的简单类。")]),v._v(" "),t("p",[t("code",[v._v("getter")]),v._v("和"),t("code",[v._v("setter")]),v._v("中错误使用的定义方式：")]),v._v(" "),t("ol",[t("li",[t("p",[t("code",[v._v("getter/setter")]),v._v("中添加业务了逻辑")])]),v._v(" "),t("li",[t("p",[v._v("同时定义"),t("code",[v._v("isXxx()")]),v._v("和"),t("code",[v._v("getXxx()")])])]),v._v(" "),t("li",[t("p",[v._v("相同的属性名容易带来歧义")])])]),v._v(" "),t("p",[v._v("如果某个类覆写了父类的某个方法，则方法表中的方法指向会指向子类的实现处。")]),v._v(" "),t("p",[v._v("向上转型时，通过父类引用执行子类方法需要注意：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("无法调用到子类中存在而父类本身不存在的方法")])]),v._v(" "),t("li",[t("p",[v._v("可以调用到子类中覆写了父类的方法，这是一种多态实现")])])]),v._v(" "),t("p",[v._v("成功覆写父类方法，需要满足的四个条件，并且只能针对非静态、非"),t("code",[v._v("final")]),v._v("、非构造方法：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("访问权限不能变小")])]),v._v(" "),t("li",[t("p",[v._v("返回类型能够向上转型成为父类的返回类型")])]),v._v(" "),t("li",[t("p",[v._v("异常也要能向上转型成为父类异常")])]),v._v(" "),t("li",[t("p",[v._v("方法名，参数类型及个数必须严格一致")])])]),v._v(" "),t("h3",{attrs:{id:"重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[v._v("#")]),v._v(" 重载")]),v._v(" "),t("p",[t("code",[v._v("JVM")]),v._v("重载方法顺序的选择方式：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("精准匹配")])]),v._v(" "),t("li",[t("p",[v._v("如果是基本数据类型，自动转换程更大表示范围的基本类型")])]),v._v(" "),t("li",[t("p",[v._v("通过自动拆箱和装箱")])]),v._v(" "),t("li",[t("p",[v._v("通过子类向上转型继承路线依次匹配")])]),v._v(" "),t("li",[t("p",[v._v("通过可变参数匹配")])])]),v._v(" "),t("h3",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[v._v("#")]),v._v(" 数据类型")]),v._v(" "),t("p",[t("code",[v._v("refvar")]),v._v("是基本数据类型，它的默认值是"),t("code",[v._v("null")]),v._v("，存储"),t("code",[v._v("refobj")]),v._v("的首地址，可以直接使用双等号"),t("code",[v._v("==")]),v._v("进行等值判断。")]),v._v(" "),t("p",[v._v("一个"),t("code",[v._v("refvar")]),v._v("至多存储一个"),t("code",[v._v("refobj")]),v._v("的首地址，一个"),t("code",[v._v("refobj")]),v._v("可以被多个"),t("code",[v._v("refvar")]),v._v("存储下它的首地址，即一个堆内对象可以被多个"),t("code",[v._v("refvar")]),v._v("引用指向")]),v._v(" "),t("p",[t("img",{attrs:{src:e(165),alt:"对象头的内部结构"}})]),v._v(" "),t("p",[v._v("对于在-128 到 127 直接的"),t("code",[v._v("Integer")]),v._v("对象由"),t("code",[v._v("IntegerCache.cache")]),v._v("产生，会复用已有的对象，这个区间可以直接使用"),t("code",[v._v("==")]),v._v("进行判断，但是这个区间外的所有数据都会在堆上产生，并不会复用已有对象，所以包装类型都使用"),t("code",[v._v("equals()")]),v._v("进行比较")]),v._v(" "),t("p",[v._v("包装类型和基础数据类型的选择：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("所有的"),t("code",[v._v("POJO")]),v._v("类属性必须使用包装数据类型")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("RPC")]),v._v("方法的返回值和参数必须使用包装数据类型")])]),v._v(" "),t("li",[t("p",[v._v("所有的局部变量推荐使用基本数据类型")])])]),v._v(" "),t("p",[t("code",[v._v("StringBuilder")]),v._v("是非线程安全的，线程安全的对象先产生是因为计算机的发展总是从单线程到多线程，从单机到分布式")]),v._v(" "),t("h2",{attrs:{id:"chapter-3-代码风格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-3-代码风格"}},[v._v("#")]),v._v(" Chapter 3 代码风格")]),v._v(" "),t("p",[v._v("命名上可体现出代码元素的特征，仅从名字上可知道代码元素的属性是什么，有利用快速厘清代码脉络。")]),v._v(" "),t("p",[v._v("命名需要遵守的约定:")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("命名符合本语言特性")])]),v._v(" "),t("li",[t("p",[v._v("命名体现现代代码元素特征")])]),v._v(" "),t("li",[t("p",[v._v("命名最好望文知意")])])]),v._v(" "),t("p",[v._v("空格使用的约定：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("任何二目、三目运算符的左右两边都必须加一个空格")])]),v._v(" "),t("li",[t("p",[v._v("注释的双斜线与注释内容之间有 0 仅有一个空格。")])]),v._v(" "),t("li",[t("p",[v._v("方法参数在定义和传入时，多个参数逗号后边心须加空格。")])]),v._v(" "),t("li",[t("p",[v._v("没有必要增加若十空格使变量的赋值等号与上一行对应位的等号对齐。")])]),v._v(" "),t("li",[t("p",[v._v("如来是大括号内为空，则简洁地写成"),t("code",[v._v("{}")]),v._v("即可，大括号中间无须焕行和空格")])]),v._v(" "),t("li",[t("p",[v._v("左右小括号与括号内部的相邻字符之间不要出现空格")])]),v._v(" "),t("li",[t("p",[v._v("左在大括号前需要加空格。")])])]),v._v(" "),t("p",[v._v("约定单个方法的总行数不超过 80 行。")]),v._v(" "),t("p",[v._v("多层嵌套不能超过三层，避免采用反逻辑运算符")]),v._v(" "),t("h2",{attrs:{id:"chapter-4-走进-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-4-走进-jvm"}},[v._v("#")]),v._v(" Chapter 4 走进 JVM")]),v._v(" "),t("h3",{attrs:{id:"字节码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节码"}},[v._v("#")]),v._v(" 字节码")]),v._v(" "),t("p",[v._v("字节码主要指令如下：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("加载或存储指令")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("讲局部变量加载到操作栈种")])]),v._v(" "),t("li",[t("p",[v._v("从操作栈顶存储到局部变量表")])]),v._v(" "),t("li",[t("p",[v._v("讲常量加载到操作栈顶")])])])]),v._v(" "),t("li",[t("p",[v._v("运算指令")])]),v._v(" "),t("li",[t("p",[v._v("类型转换指令")])]),v._v(" "),t("li",[t("p",[v._v("对象创建与访问指令")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("创建对象指令")])]),v._v(" "),t("li",[t("p",[v._v("访问属性指令")])]),v._v(" "),t("li",[t("p",[v._v("检查实例类型指令")])])])]),v._v(" "),t("li",[t("p",[v._v("操作栈管理指令")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("出栈操作")])]),v._v(" "),t("li",[t("p",[v._v("复制栈顶元素并压入栈")])])])]),v._v(" "),t("li",[t("p",[v._v("方法调用与返回指令")]),v._v(" "),t("ol",[t("li",[t("p",[t("code",[v._v("INVOKEVIRTUAL")]),v._v("指令")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("INVOKESPACIAL")]),v._v("指令")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("INVOKESTATIC")]),v._v("指令")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("RETURN")]),v._v("指令")])])])]),v._v(" "),t("li",[t("p",[v._v("同步指令")])])]),v._v(" "),t("p",[t("img",{attrs:{src:e(206),alt:"源码转换为字节码过程"}})]),v._v(" "),t("p",[v._v("执行有三种模式：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("解释执行")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("JIT")]),v._v("编译执行")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("JIT")]),v._v("编译与混合执行")])])]),v._v(" "),t("p",[t("img",{attrs:{src:e(207),alt:"即时编译流程"}})]),v._v(" "),t("p",[v._v("机器在热机状态可以承受的负载要大于冷机状态，如果以热机状态是的浏览进行切换，可能使处于冷机状态的服务器因无法承载流量而假死")]),v._v(" "),t("h3",{attrs:{id:"类加载过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[v._v("#")]),v._v(" 类加载过程")]),v._v(" "),t("p",[v._v("主要流程：")]),v._v(" "),t("ol",[t("li",[t("p",[t("code",[v._v("LOAD")]),v._v("阶段读取类文件产生的二进制流，并转换为特定的数据结构")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("Link")]),v._v("阶段包括验证、准备、解析三个步骤")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("Init")]),v._v("阶段执行类构造器"),t("code",[v._v("<clinit>")]),v._v("方法，如果赋值运算是通过其他类的静态方法来完成的，如果马上解析另外一个类，在虚拟机栈种执行完毕后柘荣刚返回值进行赋值")])])]),v._v(" "),t("p",[v._v("类加载过程是一个讲"),t("code",[v._v(".class")]),v._v("字节码文件实例化程"),t("code",[v._v("Class")]),v._v("对象并进行相关初始化的过程")]),v._v(" "),t("p",[t("code",[v._v("new")]),v._v("是强类型校验，可以调用任何构造方法，在使用"),t("code",[v._v("new")]),v._v("操作的时候，这个类可以没有被加载过。而"),t("code",[v._v("Class")]),v._v("类下的"),t("code",[v._v("newInstance")]),v._v("是弱类型，只能调用无参构造方法，如果没有默认的构造方法，就抛出"),t("code",[v._v("InstantiationExeception")]),v._v("异常，如果此构造器没有访问权限，就抛出"),t("code",[v._v("IllegalAccessExeception")])]),v._v(" "),t("p",[v._v("通过"),t("code",[v._v("setAccessible(true)")]),v._v("操作，可以是用大写"),t("code",[v._v("Class")]),v._v("类的"),t("code",[v._v("set")]),v._v("方法修改其值")]),v._v(" "),t("p",[t("code",[v._v("AppClassLoader")]),v._v("的"),t("code",[v._v("Parent")]),v._v("为"),t("code",[v._v("Bootstrap")])]),v._v(" "),t("p",[t("img",{attrs:{src:e(208),alt:"双亲委派模型"}})]),v._v(" "),t("p",[v._v("低层次的当前类加载器，不能覆盖更高层次类加载的类")]),v._v(" "),t("p",[v._v("自定义类加载器的情况：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("隔离加载类")])]),v._v(" "),t("li",[t("p",[v._v("修改类加载方式")])]),v._v(" "),t("li",[t("p",[v._v("扩展加载源")])]),v._v(" "),t("li",[t("p",[v._v("防止源码泄露")])])]),v._v(" "),t("p",[v._v("实现自定义类加载器的步骤：继承"),t("code",[v._v("ClassLoader")]),v._v("，重写"),t("code",[v._v("findClass()")]),v._v("方法，调用\n"),t("code",[v._v("defineClass()")]),v._v("方法。")]),v._v(" "),t("h3",{attrs:{id:"内存布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存布局"}},[v._v("#")]),v._v(" 内存布局")]),v._v(" "),t("p",[t("img",{attrs:{src:e(209),alt:"经典 JVM 内存分布"}})]),v._v(" "),t("p",[t("img",{attrs:{src:e(210),alt:"GC 流程"}})]),v._v(" "),t("p",[v._v("栈帧包括局部变量表、操作栈、动态连接、方法返回地址等")]),v._v(" "),t("p",[v._v("从字节码角度看待对象的创建过程：")]),v._v(" "),t("ol",[t("li",[t("p",[t("code",[v._v("NEW")]),v._v("：如果找不到"),t("code",[v._v("Class")]),v._v("对象，则进行类加载")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("DUP")]),v._v("：在栈顶赋值该引用变量，这时的栈顶有两个指向堆内实例对象的引用变量")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("INVOKESPECIAL")]),v._v("：调用对象实例方法，通过栈顶的引用变量调用"),t("code",[v._v("<init>")]),v._v("方法")])])]),v._v(" "),t("p",[v._v("从执行步骤的角度：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("确认类源信息是否存在")])]),v._v(" "),t("li",[t("p",[v._v("分配对象内存")])]),v._v(" "),t("li",[t("p",[v._v("设定默认值")])]),v._v(" "),t("li",[t("p",[v._v("设定对象头")])]),v._v(" "),t("li",[t("p",[v._v("执行"),t("code",[v._v("init")]),v._v("方法")])])]),v._v(" "),t("h3",{attrs:{id:"垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[v._v("#")]),v._v(" 垃圾回收")]),v._v(" "),t("p",[v._v("如果一个对象与"),t("code",[v._v("GCRoots")]),v._v("之间没有直接或间接的引用关系，比如某个失\n去任何引用的对象，或者两个互相环岛状循环引用的对象等，判决这些对象“死缓是可以被回收的。")]),v._v(" "),t("p",[t("img",{attrs:{src:e(211),alt:"Servial 回收流程"}})]),v._v(" "),t("h2",{attrs:{id:"chapter-5-异常与日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-5-异常与日志"}},[v._v("#")]),v._v(" Chapter 5 异常与日志")]),v._v(" "),t("p",[v._v("异常捕获是针对飞稳定代码的，捕获时要区分异常类型并做相应处理。")]),v._v(" "),t("p",[v._v("无论采用哪种方式处理异常，都严禁捕获异常后什么都不做或打印一行日志了事。如果在方法内部处理异常，需要根据不同的业务场景进行定制处理，如重试、回滚等操作。如果向上抛出异常，如上例所示，需要在异常对象中添加上下文参数、局部变量、运行环境等信息，这样有利于排查问题。")]),v._v(" "),t("p",[t("img",{attrs:{src:e(212),alt:"异常分类结构"}})]),v._v(" "),t("p",[v._v("如果"),t("code",[v._v("finally")]),v._v("代码块没有执行，可能有三种情况：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("没有进入"),t("code",[v._v("try")]),v._v("代码块")])]),v._v(" "),t("li",[t("p",[v._v("进入"),t("code",[v._v("try")]),v._v("代码块，但是代码运行种出现了死循环或死锁状态")])]),v._v(" "),t("li",[t("p",[v._v("进入"),t("code",[v._v("try")]),v._v("代码块，但是执行了"),t("code",[v._v("System.exit()")])])])]),v._v(" "),t("p",[t("code",[v._v("finally")]),v._v("代码块的职责不在于堆变量进行赋值等操作，而是清理资源、释放连接、关闭管道流等操作，此时如果发送异常也要进行捕获")]),v._v(" "),t("p",[v._v("在"),t("code",[v._v("try")]),v._v("代码块之前调用"),t("code",[v._v("lock()")]),v._v("方法，避免由于加锁失败导致"),t("code",[v._v("finanlly")]),v._v("调用"),t("code",[v._v("unlock()")]),v._v("抛出异常")]),v._v(" "),t("p",[v._v("推荐对外提供的凯放接口使用错误码了；公司内部跨应用远程服务调用优先考虑使用"),t("code",[v._v("Result")]),v._v("对象来封装错误码、错误描述对象；而应用内部则推荐直接抛出异常对象")]),v._v(" "),t("p",[v._v("记录系统日志主要有三个原因：记录操作轨迹、监控系统运行状况、回溯系统故障")]),v._v(" "),t("p",[v._v("包装记录的完整：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("记录异常时一定要输出异常堆栈")])]),v._v(" "),t("li",[t("p",[v._v("日志种如果输出对象实例，要确保类实例重写了"),t("code",[v._v("toString")]),v._v("方法，否则只会输出对象的"),t("code",[v._v("hashCode")]),v._v("，没有实际意义")])])]),v._v(" "),t("p",[t("img",{attrs:{src:e(213),alt:"日志结构框架"}})]),v._v(" "),t("h2",{attrs:{id:"chapter-6-数据结构与集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-6-数据结构与集合"}},[v._v("#")]),v._v(" Chapter 6 数据结构与集合")]),v._v(" "),t("h3",{attrs:{id:"集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[v._v("#")]),v._v(" 集合")]),v._v(" "),t("p",[t("img",{attrs:{src:e(214),alt:"Java 集合框架图"}})]),v._v(" "),t("p",[t("code",[v._v("ArrayList")]),v._v("是容量可变的非线程安全集合")]),v._v(" "),t("p",[t("code",[v._v("HashMap")]),v._v("从源码分析是使用"),t("code",[v._v("HashMap")]),v._v("来实现的")]),v._v(" "),t("p",[v._v("在"),t("code",[v._v("Java")]),v._v("体系种，数组可以存储统一类型的对象，一旦分配内存后则无法扩容")]),v._v(" "),t("p",[v._v("在数组转集合的过程中，注意是否使用了视图方式直接返回数组中的数据，例如当使用"),t("code",[v._v("Arrays.asList()")]),v._v("讲数组转换为集合时，不能使用其修改集合相关的方法，其体现的是适配器模式。"),t("code",[v._v("asList")]),v._v("的返回对象是一个"),t("code",[v._v("Arrays")]),v._v("的内部类，它并没有实现集合个数的相关修改方法")]),v._v(" "),t("p",[v._v("不要使用"),t("code",[v._v("toArray()")]),v._v("的无参方法把集合转换成数组，这样会导致泛型丢失。使用集合的"),t("code",[v._v("toArry(T[] array)")]),v._v("方法，转换为数组时，注意需要传入类型完全一样的数组，并且它的容量大小为"),t("code",[v._v("list.size()")])]),v._v(" "),t("h3",{attrs:{id:"集合泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合泛型"}},[v._v("#")]),v._v(" 集合泛型")]),v._v(" "),t("p",[t("code",[v._v("List<?>")]),v._v("是一个泛型，在没有赋值之前，表示它可以接受任何类型的集合赋值，赋值之后就不能随便往里添加元素了")]),v._v(" "),t("p",[t("code",[v._v("<? extends T>")]),v._v("是"),t("code",[v._v("Get First")]),v._v("，适用于消费集合元素为主的场景，可以赋值给任何"),t("code",[v._v("T")]),v._v("及"),t("code",[v._v("T")]),v._v("子类的集合，上界为"),t("code",[v._v("T")]),v._v("，取出来的类型带有泛型限制，向上强制转型为"),t("code",[v._v("T")]),v._v("，"),t("code",[v._v("null")]),v._v("可以表示任何类型，所以除了"),t("code",[v._v("null")]),v._v("外，任何元素都不能添加进"),t("code",[v._v("<? extends T>")])]),v._v(" "),t("p",[t("code",[v._v("<? super T>")]),v._v("是"),t("code",[v._v("Put First")]),v._v("的，生产集合元素为主的场景，可以赋值给任何"),t("code",[v._v("T")]),v._v("及"),t("code",[v._v("T")]),v._v("父类的集合，下界为"),t("code",[v._v("T")])]),v._v(" "),t("p",[t("code",[v._v("extents")]),v._v("的场景是"),t("code",[v._v("put")]),v._v("受限，而"),t("code",[v._v("super")]),v._v("场景是"),t("code",[v._v("get")]),v._v("受限")]),v._v(" "),t("h3",{attrs:{id:"元素比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元素比较"}},[v._v("#")]),v._v(" 元素比较")]),v._v(" "),t("p",[t("code",[v._v("Comparable")]),v._v("是自己和自己比，"),t("code",[v._v("Comparator")]),v._v("是第三方比较器，约定小于的情况返回"),t("code",[v._v("-1")]),v._v("，等于的情况返回"),t("code",[v._v("0")]),v._v("，大于的情况返回"),t("code",[v._v("1")])]),v._v(" "),t("p",[t("code",[v._v("hashCode")]),v._v("和"),t("code",[v._v("equals")]),v._v("的要求如下：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("如果两个对象的"),t("code",[v._v("equals")]),v._v("的结果是相等的，则两个对象的"),t("code",[v._v("hashCode")]),v._v("的返回结果必须是相同的")])]),v._v(" "),t("li",[t("p",[v._v("任何时候覆写"),t("code",[v._v("equals")]),v._v("都必须同时覆写"),t("code",[v._v("hashCode")])])])]),v._v(" "),t("p",[t("code",[v._v("Objects.hashCode()")]),v._v("的实现是默认为每一个对象生成"),t("code",[v._v("int")]),v._v("数值，其本身是根据对象的地址进行相关计算得到的"),t("code",[v._v("int")]),v._v("类型数据")]),v._v(" "),t("p",[t("code",[v._v("subList")]),v._v("方法返回的是内部类"),t("code",[v._v("SubList")]),v._v("的对象，"),t("code",[v._v("SubList")]),v._v("类是"),t("code",[v._v("ArrayList")]),v._v("的内部类")]),v._v(" "),t("p",[t("code",[v._v("java.util")]),v._v("下的所以集合类都是"),t("code",[v._v("fail-fast")]),v._v("机制，而"),t("code",[v._v("concurrent")]),v._v("包种的集合类都是"),t("code",[v._v("fail-safe")])]),v._v(" "),t("p",[v._v("使用"),t("code",[v._v("CopyOnWriteArrayList")]),v._v("的时候应该注意：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("尽量设置合理的容量初始值")])]),v._v(" "),t("li",[t("p",[v._v("使用批量添加或删除方法")]),v._v(" "),t("p",[v._v("T")])])]),v._v(" "),t("h2",{attrs:{id:"chapter-7-并发与多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-7-并发与多线程"}},[v._v("#")]),v._v(" Chapter 7 并发与多线程")]),v._v(" "),t("p",[v._v("在并发环境下，由于程序的封闭性被打破，出现以下特点：")]),v._v(" "),t("ol",[t("li",[v._v("并发程序之间有相互制约的关系")]),v._v(" "),t("li",[v._v("并发程序的执行过程是断断续续的")]),v._v(" "),t("li",[v._v("当并发数设置合理并且"),t("code",[v._v("CPU")]),v._v("拥有足够处理能力时，并发会提高程序的运行效率")])]),v._v(" "),t("h3",{attrs:{id:"线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[v._v("#")]),v._v(" 线程安全")]),v._v(" "),t("p",[v._v("线程可以拥有自己的操作栈、程序计数器、局部变量表等资源，它于同一进程内的其他线程共享该进程的所有资源")]),v._v(" "),t("p",[t("img",{attrs:{src:e(166),alt:"线程状态图"}})]),v._v(" "),t("p",[v._v("创建线程的三种方式：")]),v._v(" "),t("ol",[t("li",[v._v("继承"),t("code",[v._v("Thread")]),v._v("类")]),v._v(" "),t("li",[v._v("实现"),t("code",[v._v("Runnable")]),v._v("接口")]),v._v(" "),t("li",[v._v("实现"),t("code",[v._v("Callable")]),v._v("接口")])]),v._v(" "),t("p",[v._v("继承"),t("code",[v._v("Thread")]),v._v("的类往往不符合里氏代换原则")]),v._v(" "),t("p",[v._v("保证高并发场景下线程安全可以从四个方面考虑:")]),v._v(" "),t("ol",[t("li",[v._v("数据单线程内可见")]),v._v(" "),t("li",[v._v("只读对象")]),v._v(" "),t("li",[v._v("线程安全类")]),v._v(" "),t("li",[v._v("同步与锁机制")])]),v._v(" "),t("p",[v._v("线程安全理念的核心就是“要么只读，要么加锁”")]),v._v(" "),t("p",[v._v("并发包的主要组成：")]),v._v(" "),t("ol",[t("li",[v._v("线程同步类")]),v._v(" "),t("li",[v._v("并发集合类")]),v._v(" "),t("li",[v._v("线程管理类")]),v._v(" "),t("li",[v._v("锁相关操作")])]),v._v(" "),t("h3",{attrs:{id:"锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[v._v("#")]),v._v(" 锁")]),v._v(" "),t("p",[v._v("锁主要提供了两种特性：")]),v._v(" "),t("ul",[t("li",[v._v("互斥性")]),v._v(" "),t("li",[v._v("分段性")])]),v._v(" "),t("p",[t("img",{attrs:{src:e(215),alt:"Lock 的继承关系"}})]),v._v(" "),t("p",[v._v("在"),t("code",[v._v("AQS")]),v._v("中定义了一个"),t("code",[v._v("volatile int state")]),v._v("变量作为共享资源，如果线程获取资源失败，则进入同步"),t("code",[v._v("FIFO")]),v._v("队列中等待；如果成功获取资源就执行临界代码。执行完释放资源时，会通知同步队列中的等待线程来获取资源出队并执行。其是抽象类，内置自旋锁实现同步队列，封装入队和出队操作，提供独占、共享、中断等特性方法。")]),v._v(" "),t("p",[t("code",[v._v("CountDownLatch")]),v._v("是一次性的，用完后如果想再使用就只能重新创建一个；循环使用则使用基于"),t("code",[v._v("ReentrantLook")]),v._v("实现的"),t("code",[v._v("CyclicBarrier")])]),v._v(" "),t("p",[t("code",[v._v("synchronized")]),v._v("的原则是锁的范围要小，时间尽可能的短，即能锁对象就不要锁类，能锁代码块就不要锁方法")]),v._v(" "),t("p",[t("code",[v._v("JVM")]),v._v("底层是通过监视锁来实现"),t("code",[v._v("synchronzied")]),v._v("的，"),t("code",[v._v("JVM")]),v._v("会根据"),t("code",[v._v("synchronized")]),v._v("的当前环境，找到对应对象的"),t("code",[v._v("monitor")]),v._v("，再根据"),t("code",[v._v("monitor")]),v._v("的状态进行加、解锁的判断。")]),v._v(" "),t("h3",{attrs:{id:"线程同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程同步"}},[v._v("#")]),v._v(" 线程同步")]),v._v(" "),t("p",[v._v("对"),t("code",[v._v("volatile")]),v._v("变量的操作都并非都具有原子性")]),v._v(" "),t("p",[t("code",[v._v("LongAdder")]),v._v("类比"),t("code",[v._v("AtomicLong")]),v._v("性能更好，因为有效的减少了乐观锁的重试次数")]),v._v(" "),t("p",[v._v("一写多读的并发场景使用"),t("code",[v._v("volatile")]),v._v("修饰比变量最为合适")]),v._v(" "),t("p",[v._v("无论是从性能还是从安全上考虑，尽量使用并发包中提供的信号同步类，避免使用对象的"),t("code",[v._v("wait()")]),v._v("和"),t("code",[v._v("notify()")])]),v._v(" "),t("h3",{attrs:{id:"线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[v._v("#")]),v._v(" 线程池")]),v._v(" "),t("p",[v._v("友好拒绝的策略：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("保存到数据库进行削峰填谷，在空闲时再取出来执行")])]),v._v(" "),t("li",[t("p",[v._v("转向某个提示页面")])]),v._v(" "),t("li",[t("p",[v._v("打印日志")])])]),v._v(" "),t("p",[t("img",{attrs:{src:e(166),alt:"线程池相关类图"}})]),v._v(" "),t("p",[t("code",[v._v("Executors")]),v._v("核心方法有五个：")]),v._v(" "),t("ul",[t("li",[t("p",[t("code",[v._v("Executors.newWorkStealingPool")]),v._v("创建持有阻隔线程池支持给定的并行度，并通过使用多个队列减少竞争，此构造方法中把"),t("code",[v._v("CPU")]),v._v("数量设置为默认的并行度")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("Executors.newScheduledThreadPool")]),v._v("线程数最大为"),t("code",[v._v("Integer.MAX_VALUE")]),v._v("，存在"),t("code",[v._v("OOM")]),v._v("风险")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("Executors.newSingleThreadExecutor")]),v._v("创建一个单线程的线程池，相当于单线程串行执行所有任务，保证按任务的提交顺序依次执行")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("Executors.newFixedThreadPool")]),v._v("输入的参数即是固定的线程数，既是核型线程数也是最大线程数，不存在空闲线程，所有"),t("code",[v._v("keepAliveTime")]),v._v("等于 0")])])]),v._v(" "),t("p",[t("code",[v._v("ThreadPoolExecutor")]),v._v("提供四个公开的内部静态类：")]),v._v(" "),t("ul",[t("li",[t("p",[t("code",[v._v("AbortPolicy")]),v._v("丢弃任务并抛出"),t("code",[v._v("RejectedExecutionException")]),v._v("异常")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("DiscardPolicy")]),v._v("丢弃任务，但是不抛出异常，不推荐使用")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("DiscardOldestPolicy")]),v._v("抛弃队列中等待最久的任务，然后把当前任务加入队列中")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("CallerRunsPolicy")]),v._v("调用任务的"),t("code",[v._v("run()")]),v._v("方法绕过线程池直接执行")])])]),v._v(" "),t("p",[v._v("线程池使用的注意事项：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("合理设置各类参数，应根据实际业务场景来设置合理的工作线程数")])]),v._v(" "),t("li",[t("p",[v._v("线程资源必须通过线程池提供，不允许在应用中自行显示创建线程")])]),v._v(" "),t("li",[t("p",[v._v("创建线程或线程池时请制定有意义的线程名称，方便出错回溯")])])]),v._v(" "),t("p",[v._v("线程池不允许使用"),t("code",[v._v("Executors")]),v._v("，而是通过"),t("code",[v._v("ThreadPoolExecutor")]),v._v("的方式创建")]),v._v(" "),t("h3",{attrs:{id:"threadlocal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[v._v("#")]),v._v(" ThreadLocal")]),v._v(" "),t("p",[t("img",{attrs:{src:e(165),alt:"对象引用类型"}})]),v._v(" "),t("p",[t("code",[v._v("ThreadLocal")]),v._v("的副作用：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("脏数据")])]),v._v(" "),t("li",[t("p",[v._v("内存泄漏")])])]),v._v(" "),t("h2",{attrs:{id:"chapter-8-单元测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-8-单元测试"}},[v._v("#")]),v._v(" Chapter 8 单元测试")]),v._v(" "),t("p",[v._v("宏观上单元测试要符合"),t("code",[v._v("AIR")]),v._v("原则，微观上单元测试的代码要符合"),t("code",[v._v("BCDE")]),v._v("原则")]),v._v(" "),t("p",[t("code",[v._v("AIR")]),v._v("：自动化、独立性、可重复")]),v._v(" "),t("p",[t("code",[v._v("BCDE")]),v._v("：边界测试、正确的输入、与设计文档相结合、单元测试的目标是证明程序有错，而不是证明程序无错")]),v._v(" "),t("p",[t("code",[v._v("MOCK")]),v._v("的本质是写出更加稳定的单元测试，隔离对单元测试影响的因素，使结果变得可预测，做到真正的‘单元’测试")]),v._v(" "),t("p",[v._v("单元测试的粒度：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("粗粒度的覆盖")])]),v._v(" "),t("li",[t("p",[v._v("细粒度的覆盖")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("行覆盖")])]),v._v(" "),t("li",[t("p",[v._v("分支覆盖")])]),v._v(" "),t("li",[t("p",[v._v("条件判定覆盖")])]),v._v(" "),t("li",[t("p",[v._v("条件组合覆盖")])]),v._v(" "),t("li",[t("p",[v._v("路径覆盖")])])])])]),v._v(" "),t("h2",{attrs:{id:"chapter-9-代码规约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-9-代码规约"}},[v._v("#")]),v._v(" Chapter 9 代码规约")]),v._v(" "),t("p",[v._v("代码规约的意义：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("码出高效")])]),v._v(" "),t("li",[t("p",[v._v("码出质量")])]),v._v(" "),t("li",[t("p",[v._v("码出情怀")])])])])}),[],!1,null,null,null);_.default=o.exports}}]);